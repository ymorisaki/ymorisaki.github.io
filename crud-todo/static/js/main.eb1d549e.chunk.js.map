{"version":3,"sources":["reducer/reducer.js","components/Form.js","actions/actions.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["reducer","todos","action","type","text","isComplete","newTodos","i","length","index","push","map","todo","Object","assign","Form","useState","value","setValue","dispatch","useContext","DispatchContext","onSubmit","e","preventDefault","placeholder","onChange","target","Todo","style","textDecoration","className","onClick","toggleTodo","removeTodo","TodoList","key","createContext","App","useReducer","jsonUri","isFirstRender","useRef","useEffect","TODOS","current","fetch","then","response","json","init","initTodo","method","body","JSON","stringify","headers","useRender","Provider","ReactDOM","render","document","getElementById"],"mappings":"mPAKaA,EAAU,SAACC,EAAOC,GAC7B,OAAOA,EAAOC,MACZ,IAAK,YACH,OAAOD,EAAOD,MAChB,IAAK,WACH,MAAM,GAAN,mBAAWA,GAAX,CAAkB,CAChBG,KAAMF,EAAOE,KACbC,YAAY,KAEhB,IAAK,cAEH,IADA,IAAMC,EAAW,GACRC,EAAI,EAAGA,EAAIN,EAAMO,OAAQD,IAC5BL,EAAOO,QAAUF,GACnBD,EAASI,KAAKT,EAAMM,IAGxB,OAAOD,EACT,IAAK,cACH,OAAOL,EAAMU,KAAI,SAACC,EAAMH,GACtB,OAAIP,EAAOO,QAAUA,EACZI,OAAOC,OAAO,GAAIF,EAAM,CAC7BP,YAAaO,EAAKP,aAGfO,KAEX,QACE,OAAO,YAAIX,KCDFc,EAxBF,WAAO,IAAD,EACSC,mBAAS,IADlB,mBACVC,EADU,KACHC,EADG,KAEXC,EAAWC,qBAAWC,GAS5B,OACE,0BAAMC,SARc,SAAAC,IACpBA,EAAEC,iBACGP,KACLE,ECNK,CACLhB,KAAM,WACNC,KDIiBa,IACjBC,EAAS,OAKP,2BACEf,KAAK,OACLsB,YAAY,6DACZR,MAAOA,EACPS,SAAU,SAAAH,GAAC,OAAIL,EAASK,EAAEI,OAAOV,UAEnC,4BAAQd,KAAK,UAAb,4BEESyB,EAhBF,SAAC,GAAqB,IAAnBhB,EAAkB,EAAlBA,KAAMH,EAAY,EAAZA,MACdU,EAAWC,qBAAWC,GAE5B,OACE,4BACE,uBAAGQ,MAAO,CAACC,eAAgBlB,EAAKP,WAAa,eAAiB,SAAWO,EAAKR,MAC9E,wBAAI2B,UAAU,eACZ,4BACE,4BAAQ5B,KAAK,SAAS6B,QAAS,kBAAMb,EDCrB,SAAAV,GACxB,MAAO,CACLN,KAAM,cACNM,SCJoDwB,CAAWxB,MAAWG,EAAKP,WAAa,qBAAQ,gBAC9F,4BAAQF,KAAK,SAAS6B,QAAS,kBAAMb,EDPrB,SAAAV,GACxB,MAAO,CACLN,KAAM,cACNM,SCIoDyB,CAAWzB,MAAzD,oBCJK0B,EAVE,SAAC,GAAe,IAAblC,EAAY,EAAZA,MAClB,OACE,wBAAI8B,UAAU,aACX9B,EAAMU,KAAI,SAACC,EAAMH,GAAP,OACT,kBAAC,EAAD,CAAMA,MAAOA,EAAO2B,IAAK3B,EAAOG,KAAMA,SCAjCS,EAAkBgB,0BAwDhBC,EAfH,WAAO,IAAD,EACUC,qBAAWvC,EAAS,IAD9B,mBACTC,EADS,KACFkB,EADE,KAKhB,OAvCgB,SAAClB,EAAOkB,GACxB,IAAMqB,EAAU,qCACVC,EAAgBC,kBAAO,GAE7BC,qBAAU,WACR,IAAMrC,EAAW,CACfsC,MAAM,YAAK3C,IAITwC,EAAcI,SAChBC,MAAMN,GACLO,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJ5C,EAASsC,MAAQ,CAACM,EAAKN,OACvBzB,EHnCgB,SAAAlB,GACtB,MAAO,CACLE,KAAM,YACNF,SGgCakD,CAASD,EAAKN,QACvBH,EAAcI,SAAU,KAM5BC,MAAMN,EAAS,CACbY,OAAQ,MACRC,KAAMC,KAAKC,UAAUjD,GACrBkD,QAAS,CACP,eAAgB,yBAStBC,CAAUxD,EAAOkB,GAGf,yBAAKY,UAAU,aACb,kBAACV,EAAgBqC,SAAjB,CAA0BzC,MAAOE,GAC/B,kBAAC,EAAD,CAAUlB,MAAOA,IACjB,kBAAC,EAAD,S,YCvDR0D,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.eb1d549e.chunk.js","sourcesContent":["/**\n * Reducer\n * @param {Array} todos TODOリストオブジェクトを格納する配列\n * @param {Object} action どのような更新かを示す[action.type]と更新された値及び項目を示すプロパティを格納\n */\nexport const reducer = (todos, action) => {\n  switch(action.type) {\n    case 'INIT_TODO':\n      return action.todos\n    case 'ADD_TODO':\n      return [...todos, {\n        text: action.text,\n        isComplete: false\n      }]\n    case 'REMOVE_TODO':\n      const newTodos = []\n      for (let i = 0; i < todos.length; i++) {\n        if (action.index !== i) {\n          newTodos.push(todos[i])\n        }\n      }\n      return newTodos\n    case 'TOGGLE_TODO':\n      return todos.map((todo, index) => {\n        if (action.index === index) {\n          return Object.assign({}, todo, {\n            isComplete: !todo.isComplete\n          })\n        }\n        return todo\n      })\n    default:\n      return [...todos]\n  }\n}\n","import React, {\n  useState,\n  useContext,\n} from 'react';\nimport { addTodo } from '../actions/actions'\nimport { DispatchContext } from '../App'\n\nconst Form = () => {\n  const [value, setValue] = useState('')\n  const dispatch = useContext(DispatchContext)\n\n  const submitHandler = e => {\n    e.preventDefault();\n    if (!value) return\n    dispatch(addTodo(value))\n    setValue('')\n  }\n\n  return (\n    <form onSubmit={submitHandler}>\n      <input\n        type=\"text\"\n        placeholder=\"TODOを入力してください\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n      />\n      <button type=\"submit\">TODOを登録</button>\n    </form>\n  )\n}\n\nexport default Form;\n","export const initTodo = todos => {\n  return {\n    type: 'INIT_TODO',\n    todos\n  }\n}\n\nexport const addTodo = text => {\n  return {\n    type: 'ADD_TODO',\n    text\n  }\n}\n\nexport const removeTodo = index => {\n  return {\n    type: 'REMOVE_TODO',\n    index\n  }\n}\n\nexport const toggleTodo = index => {\n  return {\n    type: 'TOGGLE_TODO',\n    index\n  }\n}\n","import React, {\n  useContext\n} from 'react';\n\nimport { removeTodo, toggleTodo } from '../actions/actions'\nimport { DispatchContext } from '../App'\n\n/**\n * Component\n * @param {Object} todo TODOの内容と達成状況を持つ\n * @param {Number} index 何番目のTODOリストかを表す\n */\nconst Todo = ({ todo, index }) => {\n  const dispatch = useContext(DispatchContext)\n\n  return (\n    <li>\n      <p style={{textDecoration: todo.isComplete ? 'line-through' : 'none'}}>{ todo.text }</p>\n      <ul className=\"button-list\">\n        <li>\n          <button type=\"button\" onClick={() => dispatch(toggleTodo(index))}>{ todo.isComplete ? '未達成' : '達成' }</button>\n          <button type=\"button\" onClick={() => dispatch(removeTodo(index))}>削除</button>\n        </li>\n      </ul>\n    </li>\n  )\n}\n\nexport default Todo;\n","import React from 'react'\nimport Todo from './Todo'\n\n/**\n * Component\n * @param {Array} todos TODOリストオブジェクトの配列\n */\nconst TodoList = ({ todos }) => {\n  return (\n    <ul className=\"todo-list\">\n      {todos.map((todo, index) => (\n        <Todo index={index} key={index} todo={todo} />\n      ))}\n    </ul>\n  )\n}\n\nexport default TodoList","import React, {\n  useReducer,\n  createContext,\n  useEffect,\n  useRef\n} from 'react';\nimport { reducer } from './reducer/reducer'\nimport { initTodo } from './actions/actions'\nimport Form from './components/Form'\nimport TodoList from './components/TodoList'\n\nexport const DispatchContext = createContext()\n\n/**\n * カスタムフック（useRef, useEffect）\n * @param {Array} todos TODOリストObjectを列挙する配列\n * @param {Function} dispatch 更新されたTODOリストをアップデートする関数\n */\nconst useRender = (todos, dispatch) => {\n  const jsonUri = 'https://api.myjson.com/bins/1e8uds'\n  const isFirstRender = useRef(true)\n\n  useEffect(() => {\n    const newTodos = {\n      TODOS: [...todos]\n    }\n\n    // 初回レンダリング後の処理\n    if (isFirstRender.current) {\n      fetch(jsonUri)\n      .then(response => {\n        return response.json()\n      })\n      .then(init => {\n        newTodos.TODOS = [init.TODOS]\n        dispatch(initTodo(init.TODOS))\n        isFirstRender.current = false\n        return\n      })\n    }\n\n    // ２回目以降のレンダリング後の処理\n    fetch(jsonUri, {\n      method: 'PUT',\n      body: JSON.stringify(newTodos),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n  })\n}\n\nconst App = () => {\n  const [todos, dispatch] = useReducer(reducer, [])\n\n  useRender(todos, dispatch)\n\n  return (\n    <div className=\"todo-wrap\">\n      <DispatchContext.Provider value={dispatch}>\n        <TodoList todos={todos} />\n        <Form  />\n      </DispatchContext.Provider>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './reset.css'\nimport './App.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}