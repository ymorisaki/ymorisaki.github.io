{"version":3,"sources":["components/Form.js","actions/actions.js","components/Todo.js","components/TodoList.js","components/App.js","reducer/reducer.js","containers/App.js","index.js"],"names":["Form","useState","value","setValue","dispatch","useContext","DispatchContext","onSubmit","e","preventDefault","type","text","placeholder","onChange","target","Todo","todo","index","style","textDecoration","isComplete","className","onClick","toggleTodo","removeTodo","TodoList","todos","map","key","createContext","AppConponent","Provider","reducer","action","newTodos","i","length","push","Object","assign","AppContainer","useReducer","isFirstRender","useRef","jsonUri","useEffect","TODOS","current","fetch","then","response","json","init","initTodo","method","body","JSON","stringify","headers","useRender","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c649f1b6.chunk.js","sourcesContent":["import React, {\n  useState,\n  useContext,\n} from 'react';\nimport { addTodo } from '../actions/actions'\nimport { DispatchContext } from './App'\n\nconst Form = () => {\n  const [value, setValue] = useState('')\n  const dispatch = useContext(DispatchContext)\n\n  const submitHandler = e => {\n    e.preventDefault();\n    if (!value) return\n    dispatch(addTodo(value))\n    setValue('')\n  }\n\n  return (\n    <form onSubmit={submitHandler}>\n      <input\n        type=\"text\"\n        placeholder=\"TODOを入力してください\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n      />\n      <button type=\"submit\">TODOを登録</button>\n    </form>\n  )\n}\n\nexport default Form;\n","/*\n * actionCreater関数\n * dispatch関数を通じてreducerにオブジェクトして渡される\n * actionCreaterは必ずdispatchの引数として渡される\n * \n * 使用例と展開イメージ\n * dispatch(addTodo(String))\n * dispatch({ type: 'ADD_TODO', text: String })\n * reducer(todos, { type: 'ADD_TODO', text: String }) => {...}\n */\nexport const initTodo = todos => {\n  return {\n    type: 'INIT_TODO',\n    todos\n  }\n}\n\nexport const addTodo = text => {\n  return {\n    type: 'ADD_TODO',\n    text\n  }\n}\n\nexport const removeTodo = index => {\n  return {\n    type: 'REMOVE_TODO',\n    index\n  }\n}\n\nexport const toggleTodo = index => {\n  return {\n    type: 'TOGGLE_TODO',\n    index\n  }\n}\n","import React, { useContext } from 'react';\nimport { DispatchContext } from './App'\nimport {\n  removeTodo,\n  toggleTodo\n} from '../actions/actions'\n\n/**\n * Component\n * @param {Object} todo TODOの内容と達成状況を持つ\n * @param {Number} index 何番目のTODOリストかを表す\n */\nconst Todo = ({ todo, index }) => {\n  const dispatch = useContext(DispatchContext)\n\n  return (\n    <li>\n      <p style={{textDecoration: todo.isComplete ? 'line-through' : 'none'}}>{ todo.text }</p>\n      <ul className=\"button-list\">\n        <li>\n          <button type=\"button\" onClick={() => dispatch(toggleTodo(index))}>{ todo.isComplete ? '未達成' : '達成' }</button>\n          <button type=\"button\" onClick={() => dispatch(removeTodo(index))}>削除</button>\n        </li>\n      </ul>\n    </li>\n  )\n}\n\nexport default Todo;\n","import React from 'react'\nimport Todo from './Todo'\n\n/**\n * Component\n * @param {Array} todos TODOリストオブジェクトの配列\n */\nconst TodoList = ({ todos }) => {\n  return (\n    <ul className=\"todo-list\">\n      {todos.map((todo, index) => (\n        <Todo index={index} key={index} todo={todo} />\n      ))}\n    </ul>\n  )\n}\n\nexport default TodoList","import React, { createContext } from 'react';\nimport Form from './Form'\nimport TodoList from './TodoList'\n\nexport const DispatchContext = createContext()\n\nconst AppConponent = ({ todos, dispatch }) => {\n\n  return (\n    <div className=\"todo-wrap\">\n      <DispatchContext.Provider value={dispatch}>\n        <TodoList todos={todos} />\n        <Form />\n      </DispatchContext.Provider>\n    </div>\n  )\n}\n\nexport default AppConponent;\n","/**\n * Reducer\n * @param {Array} todos 更新される直前のTODOリスト\n * @param {Object} action どのような更新かを示す[action.type]と更新された値及び項目を示すプロパティを格納\n */\nexport const reducer = (todos, action) => {\n  switch(action.type) {\n    // 初回読み込み時にJSON APIからGETしたTODOオブジェクトリストをそのまま反映\n    case 'INIT_TODO':\n      return action.todos\n    // 現在のTODOリスト配列の最後尾に、渡されたテキストを反映したTODOを追加\n    case 'ADD_TODO':\n      return [...todos, {\n        text: action.text,\n        isComplete: false\n      }]\n    // クリックされたボタンが何番目かを示すindexを元に、該当の配列を除いたTODOリストを作成\n    case 'REMOVE_TODO':\n      const newTodos = []\n      for (let i = 0; i < todos.length; i++) {\n        if (action.index !== i) {\n          newTodos.push(todos[i])\n        }\n      }\n      return newTodos\n    // クリックされたボタンが何番目かを示すindexを元に、該当のTODOのisCompleteを反転させる\n    case 'TOGGLE_TODO':\n      return todos.map((todo, index) => {\n        if (action.index === index) {\n          return Object.assign({}, todo, {\n            isComplete: !todo.isComplete\n          })\n        }\n        return todo\n      })\n    default:\n      return [...todos]\n  }\n}\n","import React, {\n  useReducer,\n  useEffect,\n  useRef\n} from 'react';\nimport AppConponent from '../components/App'\nimport { reducer } from '../reducer/reducer'\nimport { initTodo } from '../actions/actions'\n\n/**\n * カスタムフック（useReducer, useRef, useEffect）\n * @param {Array} todos TODOリストObjectを列挙する配列\n * @param {Function} dispatch 更新されたTODOリストをアップデートする関数\n * @returns {Array} [todos]現在のTODOリスト, [dispatch]actionCreaterをReducerへ渡す関数\n */\nconst useRender = () => {\n  const [todos, dispatch] = useReducer(reducer, [])\n  const isFirstRender = useRef(true)\n  const jsonUri = 'https://api.myjson.com/bins/1e8uds'\n\n  useEffect(() => {\n    const newTodos = {\n      TODOS: [...todos]\n    }\n\n    // 初回レンダリング後の処理\n    if (isFirstRender.current) {\n      fetch(jsonUri)\n      .then(response => {\n        return response.json()\n      })\n      .then(init => {\n        newTodos.TODOS = [init.TODOS]\n        dispatch(initTodo(init.TODOS))\n        isFirstRender.current = false\n        return\n      })\n    }\n\n    // ２回目以降のレンダリング後の処理\n    fetch(jsonUri, {\n      method: 'PUT',\n      body: JSON.stringify(newTodos),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n  }, [todos])\n\n  return [todos, dispatch]\n}\n\nconst AppContainer = () => {\n  const [todos, dispatch] = useRender()\n\n  return (\n    <AppConponent todos={todos} dispatch={dispatch} />\n  )\n}\n\nexport default AppContainer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppContainer from './containers/App'\nimport './css/reset.css'\nimport './css/App.css'\n\nReactDOM.render(\n  <AppContainer />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}