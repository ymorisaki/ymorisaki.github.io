{"version":3,"sources":["components/Header.tsx","actions/action.ts","components/Form.tsx","components/InputWrap.tsx","components/ResultArea.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","reducers/reducers.ts","index.tsx"],"names":["HeaderWrapper","styled","header","HeaderInner","div","H1","h1","Header","textUpdate","text","type","addTextList","textObj","FormWrap","form","TextArea","textarea","Button","button","connect","state","textValue","onSubmit","e","preventDefault","isDefault","placeholder","onChange","target","value","Wrapper","Input","input","LabelText","p","fontValue","lineValue","marginValue","textList","fontUpdate","size","lineUpdate","marginUpdate","step","ResultWrap","Text","map","index","key","style","fontSize","marginTop","lineHeight","Section","SectionInner","Main","App","Boolean","window","location","hostname","match","initTextList","rootReducers","combineReducers","action","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee258a5f.chunk.js","sourcesContent":["import React, { FC } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst HeaderWrapper = styled.header`\r\n    padding: 40px 0;\r\n    background-color: #6eb4c3;\r\n`\r\n\r\nconst HeaderInner = styled.div`\r\n    max-width: 900px;\r\n    margin: auto;\r\n`\r\n\r\nconst H1 = styled.h1`\r\n    margin: 0;\r\n    color: #fff;\r\n    text-align: center;\r\n`\r\n\r\nconst Header: FC = () => (\r\n    <HeaderWrapper>\r\n        <HeaderInner>\r\n            <H1>LineHeightCalclator</H1>\r\n        </HeaderInner>\r\n    </HeaderWrapper>\r\n)\r\n\r\nexport default Header","export const FONT_VALUE: string = 'FONT_VALUE'\r\nexport const LINE_VALUE: string = 'LINE_VALUE'\r\nexport const MARGIN_VALUE: string = 'MARGIN_VALUE'\r\nexport const TEXT_VALUE: string = 'TEXT_VALUE'\r\nexport const TEXT_LIST: string = 'TEXT_LIST'\r\n\r\nexport const fontUpdate = (size: number) => {\r\n    return {\r\n        type: FONT_VALUE,\r\n        size\r\n    }\r\n}\r\n\r\nexport const lineUpdate = (size: number) => {\r\n    return {\r\n        type: LINE_VALUE,\r\n        size\r\n    }\r\n}\r\n\r\nexport const marginUpdate = (size: number) => {\r\n    return {\r\n        type: MARGIN_VALUE,\r\n        size\r\n    }\r\n}\r\n\r\nexport const textUpdate = (text: string) => {\r\n    return {\r\n        type: TEXT_VALUE,\r\n        text\r\n    }\r\n}\r\n\r\nexport const addTextList = (textObj: object) => {\r\n    return {\r\n        type: TEXT_LIST,\r\n        textObj\r\n    }\r\n}","import React, { FC } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { textUpdate, addTextList } from '../actions/action'\r\nimport styled from 'styled-components'\r\n\r\nconst FormWrap = styled.form`\r\n    max-width: 600px;\r\n    margin: 20px auto 0;\r\n`\r\n\r\nconst TextArea = styled.textarea`\r\n    width: 100%;\r\n    height: 35px;\r\n    padding: 5px 0px 5px 5px;\r\n    font-size: 14px;\r\n`\r\n\r\nconst Button = styled.button`\r\n    display: block;\r\n    width: 140px\r\n    margin: 15px auto 0;\r\n    padding: 5px 15px;\r\n    -webkit-appearance: none;\r\n    box-shadow: none;\r\n    border: none;\r\n    border-radius: 4px;\r\n    background-color: #6eb4c3;\r\n    color: #fff;\r\n`\r\n\r\n// interface\r\ninterface Form {\r\n    textValue: string,\r\n    textList: {\r\n        text: string,\r\n        isDefault: boolean\r\n    }\r\n    textUpdate: (string) => string,\r\n    addTextList: (object) => object\r\n}\r\n\r\nconst Form: FC<Form> = (\r\n    {\r\n        textValue,\r\n        textUpdate,\r\n        addTextList\r\n    }\r\n) => {\r\n    return (\r\n        <FormWrap onSubmit={e => {\r\n            e.preventDefault();\r\n            if (!textValue) return\r\n            addTextList({ text: textValue, isDefault: false })\r\n            textUpdate('')\r\n        }}>\r\n            <TextArea\r\n                placeholder=\"追加するテキストを入力してください\"\r\n                onChange={e => textUpdate(e.target.value)}\r\n                value={textValue}\r\n            >\r\n            </TextArea>\r\n            <Button type=\"submit\">テキストを追加</Button>\r\n        </FormWrap>\r\n    )\r\n}\r\n\r\nexport default connect(\r\n    state => ({ textValue: state.textValue }),\r\n    { textUpdate, addTextList }\r\n)(Form)","import React, { FC } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Form from './Form'\r\nimport styled from 'styled-components'\r\nimport { fontUpdate, lineUpdate, marginUpdate, textUpdate, addTextList } from '../actions/action';\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    max-width: 600px;\r\n    margin: 20px auto 0;\r\n`\r\n\r\nconst Input = styled.input`\r\n    padding: 5px;\r\n    border-radius: 5px;\r\n    border: 1px solid #98a7c8;\r\n`\r\n\r\nconst LabelText = styled.p`\r\n    margin: 0 0 10px;\r\n    font-size: 20px;\r\n`\r\n\r\n// interface\r\ninterface InputWrap {\r\n    fontValue: number,\r\n    marginValue: number,\r\n    lineValue: number,\r\n    fontUpdate: (number) => number,\r\n    lineUpdate: (number) => number,\r\n    marginUpdate: (number) => number,\r\n}\r\n\r\nconst InputWrap: FC<InputWrap> = (\r\n    {\r\n        fontValue,\r\n        marginValue,\r\n        lineValue,\r\n        fontUpdate,\r\n        lineUpdate,\r\n        marginUpdate,\r\n    }\r\n) => (\r\n    <>\r\n        <Wrapper>\r\n            <label>\r\n                <LabelText>FontSize</LabelText>\r\n                <Input type=\"number\" step=\"1\" value={fontValue} onChange={e => fontUpdate(e.target.value)} />\r\n            </label>\r\n            <label>\r\n                <LabelText>LineHeight</LabelText>\r\n                <Input type=\"number\" step=\"0.1\" value={lineValue} onChange={e => lineUpdate(e.target.value)} />\r\n            </label>\r\n            <label>\r\n                <LabelText>MarinTop</LabelText>\r\n                <Input type=\"number\" step=\"1\" value={marginValue} onChange={e => marginUpdate(e.target.value)} />\r\n            </label>\r\n        </Wrapper>\r\n        <Form />\r\n    </>\r\n)\r\n\r\n\r\nexport default connect(\r\n    state => (\r\n        {\r\n            fontValue: state.fontValue,\r\n            lineValue: state.lineValue,\r\n            marginValue: state.marginValue,\r\n            textValue: state.textValue,\r\n            textList: state.textList\r\n        }\r\n    ),\r\n    { fontUpdate, lineUpdate, marginUpdate, textUpdate, addTextList }\r\n)(InputWrap)","import React, { FC } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport styled from 'styled-components'\r\n\r\n// styledComponents\r\nconst ResultWrap = styled.div`\r\n    margin-top: 15px\r\n`\r\n\r\nconst Text = styled.p`\r\n    margin: 0;\r\n    background-color: #eee;\r\n`\r\n\r\n// interface\r\ninterface ResultArea {\r\n    fontValue: number,\r\n    lineValue: number,\r\n    marginValue: number,\r\n    textValue: string,\r\n    textList: {\r\n        text?: string,\r\n        index?: number,\r\n        isDefault?: boolean,\r\n        map: any\r\n    },\r\n}\r\n\r\nconst ResultArea: FC<ResultArea> = (\r\n    {\r\n        fontValue,\r\n        lineValue,\r\n        marginValue,\r\n        textValue,\r\n        textList\r\n    }\r\n) => (\r\n    <ResultWrap>\r\n        {textList.map((text, index: number) => (\r\n            <Text\r\n                key={index}\r\n                style={\r\n                    {\r\n                        fontSize: `${fontValue}px`,\r\n                        marginTop: `${marginValue}px`,\r\n                        lineHeight: `${lineValue}`,\r\n                    }\r\n                }\r\n            >\r\n                            {\r\n                            text.isDefault ?\r\n                            `FontSizeは${fontValue}px、lineHeightは${lineValue}、marginTopは${marginValue}pxです。`:\r\n                            `${text.text}`\r\n                            }\r\n            </Text>\r\n        ))}\r\n    </ResultWrap>\r\n)\r\n\r\n\r\nexport default connect(\r\n    state => (\r\n        {\r\n            fontValue: state.fontValue,\r\n            lineValue: state.lineValue,\r\n            marginValue: state.marginValue,\r\n            textValue: state.textValue,\r\n            textList: state.textList\r\n        }\r\n    )\r\n)(ResultArea)","import React, { FC } from 'react'\r\nimport InputWrap from './InputWrap'\r\nimport styled from 'styled-components'\r\nimport ResultArea from './ResultArea';\r\n\r\nconst Section = styled.div``\r\n\r\nconst SectionInner = styled.div`\r\n    max-width: 600px;\r\n    margin: auto;\r\n`\r\n\r\nconst Main: FC = () => (\r\n    <main>\r\n        <Section>\r\n            <SectionInner>\r\n                <InputWrap />\r\n                <ResultArea />\r\n            </SectionInner>\r\n        </Section>\r\n    </main>\r\n)\r\n\r\nexport default Main","import React, { FC } from 'react'\nimport Header from './components/Header'\nimport Main from './components/Main'\n\nconst App: FC = () => {\n  return (\n    <>\n      <Header />\n      <Main />\n    </>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import\r\nimport { combineReducers } from 'redux'\r\nimport {\r\n    FONT_VALUE,\r\n    LINE_VALUE,\r\n    MARGIN_VALUE,\r\n    TEXT_VALUE,\r\n    TEXT_LIST\r\n} from '../actions/action'\r\n\r\n// interface\r\ninterface action {\r\n    type: string,\r\n    size?: number,\r\n    text?: string,\r\n    textObj?: any\r\n}\r\n\r\nconst fontValue = (\r\n    state: number = 16,\r\n    action: action\r\n) => {\r\n    switch (action.type) {\r\n        case FONT_VALUE:\r\n            return action.size\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst lineValue = (\r\n    state: number = 1.5,\r\n    action: action\r\n) => {\r\n    switch (action.type) {\r\n        case LINE_VALUE:\r\n            return action.size\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst marginValue = (\r\n    state: number = 16,\r\n    action: action\r\n) => {\r\n    switch (action.type) {\r\n        case MARGIN_VALUE:\r\n            return action.size\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst textValue = (\r\n    state: string = '',\r\n    action: action\r\n) => {\r\n    switch (action.type) {\r\n        case TEXT_VALUE:\r\n            return action.text\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nlet initTextList = [\r\n    {\r\n        text: '',\r\n        isDefault: true\r\n    },\r\n    {\r\n        text: '',\r\n        isDefault: true\r\n    },\r\n    {\r\n        text: '',\r\n        isDefault: true\r\n    }\r\n]\r\n\r\nconst textList = (\r\n    state: object[] = initTextList,\r\n    action: action\r\n) => {\r\n    switch (action.type) {\r\n        case TEXT_LIST:\r\n            return [\r\n                ...state,\r\n                {\r\n                    text: action.textObj.text,\r\n                    isDefault: false\r\n                }\r\n            ]\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst rootReducers = combineReducers({\r\n    fontValue,\r\n    lineValue,\r\n    marginValue,\r\n    textValue,\r\n    textList\r\n})\r\n\r\nexport default rootReducers","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducers from './reducers/reducers';\n\nconst store: any = createStore(rootReducers)\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}